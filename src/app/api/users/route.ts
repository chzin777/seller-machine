import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import bcrypt from 'bcryptjs';
import { requirePermission } from '../../../../lib/permissions';

// Fun√ß√£o para determinar o perfil automaticamente baseado na hierarquia
function determineUserRole(empresaId: number, diretoriaId: number, regionalId: number | null, filialId: number | null, requestedRole: string): 'VENDEDOR' | 'GESTOR_I' | 'GESTOR_II' | 'GESTOR_III' | 'GESTOR_MASTER' {
  // Se o usu√°rio solicitou um perfil espec√≠fico, validamos se √© compat√≠vel com sua posi√ß√£o hier√°rquica
  
  // GESTOR_MASTER: Pode ser atribu√≠do em qualquer n√≠vel (decis√£o administrativa)
  if (requestedRole === 'GESTOR_MASTER') {
    return 'GESTOR_MASTER';
  }
  
  // GESTOR_III: N√≠vel de diretoria (sem regional/filial espec√≠fica ou com m√∫ltiplas regionais)
  if (requestedRole === 'GESTOR_III') {
    return 'GESTOR_III';
  }
  
  // GESTOR_II: N√≠vel de regional (tem regional mas pode ou n√£o ter filial espec√≠fica)
  if (requestedRole === 'GESTOR_II' && regionalId) {
    return 'GESTOR_II';
  }
  
  // GESTOR_I: N√≠vel de filial (tem filial espec√≠fica)
  if (requestedRole === 'GESTOR_I' && filialId) {
    return 'GESTOR_I';
  }
  
  // VENDEDOR: Padr√£o para usu√°rios operacionais
  // Pode estar em qualquer n√≠vel da hierarquia
  if (requestedRole === 'VENDEDOR') {
    return 'VENDEDOR';
  }
  
  // Se chegou at√© aqui, aplica l√≥gica autom√°tica baseada na hierarquia
  if (filialId) {
    // Usu√°rio vinculado a uma filial espec√≠fica - padr√£o √© VENDEDOR, mas pode ser GESTOR_I
    return requestedRole === 'GESTOR_I' ? 'GESTOR_I' : 'VENDEDOR';
  } else if (regionalId) {
    // Usu√°rio vinculado a uma regional (sem filial espec√≠fica) - pode ser GESTOR_II ou VENDEDOR
    return requestedRole === 'GESTOR_II' ? 'GESTOR_II' : 'VENDEDOR';
  } else {
    // Usu√°rio vinculado apenas √† diretoria - pode ser GESTOR_III ou VENDEDOR
    return requestedRole === 'GESTOR_III' ? 'GESTOR_III' : 'VENDEDOR';
  }
}

// GET /api/users - Lista todos os usu√°rios
export async function GET() {
  try {
    const users = await prisma.users.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        telefone: true,
        role: true,
        area: true,
        active: true,
        Empresas: {
          select: {
            id: true,
            razaoSocial: true
          }
        },
        diretorias: {
          select: {
            id: true,
            nome: true
          }
        },
        regionais: {
          select: {
            id: true,
            nome: true
          }
        },
        Filiais: {
          select: {
            id: true,
            nome: true
          }
        },
        createdAt: true,
        updatedAt: true
      },
      orderBy: {
        email: 'asc'
      }
    });

    return NextResponse.json(users);
  } catch (error) {
    console.error('Erro ao buscar usu√°rios:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

// POST /api/users - Cria um novo usu√°rio
export async function POST(req: NextRequest) {
  // üîí Verifica√ß√£o de Seguran√ßa - Adicionado automaticamente
  const authResult = requirePermission('CREATE_USERS')(req);
  if (!authResult.allowed) {
    return NextResponse.json(
      { error: authResult.error || 'Acesso n√£o autorizado' },
      { status: 401 }
    );
  }

  try {
    const { name, email, telefone, password, role, empresaId, diretoriaId, regionalId, filialId, area } = await req.json();
    
    if (!name || !email || !password || !role || !empresaId || !diretoriaId) {
      return NextResponse.json({ 
        error: 'Nome, email, senha, perfil, empresa e diretoria s√£o obrigat√≥rios.' 
      }, { status: 400 });
    }

    // Valida√ß√£o de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json({ error: 'Email inv√°lido.' }, { status: 400 });
    }

    // Valida√ß√£o de senha
    if (password.length < 6) {
      return NextResponse.json({ error: 'Senha deve ter pelo menos 6 caracteres.' }, { status: 400 });
    }

    // Verifica se j√° existe usu√°rio com o mesmo email
    const existingUser = await prisma.users.findUnique({
      where: { email }
    });

    if (existingUser) {
      return NextResponse.json({ error: 'Email j√° cadastrado.' }, { status: 409 });
    }

    // Valida√ß√£o de hierarquia - verifica se empresa existe
    const empresa = await prisma.empresa.findUnique({
      where: { id: empresaId }
    });

    if (!empresa) {
      return NextResponse.json({ error: 'Empresa n√£o encontrada.' }, { status: 400 });
    }

    // Valida√ß√£o de hierarquia - verifica se diretoria existe e pertence √† empresa
    const diretoria = await prisma.diretorias.findFirst({
      where: { 
        id: diretoriaId,
        empresaId: empresaId
      }
    });

    if (!diretoria) {
      return NextResponse.json({ error: 'Diretoria n√£o encontrada ou n√£o pertence √† empresa selecionada.' }, { status: 400 });
    }

    // Se regional foi informada, valida se existe e pertence √† diretoria
    if (regionalId) {
      const regional = await prisma.regionais.findFirst({
        where: { 
          id: regionalId,
          diretoriaId: diretoriaId
        }
      });

      if (!regional) {
        return NextResponse.json({ error: 'Regional n√£o encontrada ou n√£o pertence √† diretoria selecionada.' }, { status: 400 });
      }
    }

    // Se filial foi informada, valida se existe e pertence √† regional
    if (filialId) {
      if (!regionalId) {
        return NextResponse.json({ error: 'Regional √© obrigat√≥ria quando filial √© informada.' }, { status: 400 });
      }

      const filial = await prisma.filial.findFirst({
        where: { 
          id: filialId,
          regionalId: regionalId
        }
      });

      if (!filial) {
        return NextResponse.json({ error: 'Filial n√£o encontrada ou n√£o pertence √† regional selecionada.' }, { status: 400 });
      }
    }

    // Hash da senha
    const hashedPassword = await bcrypt.hash(password, 10);

    // Determina o perfil final baseado na hierarquia e solicita√ß√£o
    const finalRole = determineUserRole(empresaId, diretoriaId, regionalId, filialId, role);

    // Cria usu√°rio
    const user = await prisma.users.create({
      data: {
        name,
        email,
        telefone: telefone || null,
        password: hashedPassword,
        role: finalRole,
        empresaId,
        diretoriaId,
        regionalId: regionalId || null,
        filialId: filialId || null,
        area: area || null,
        active: true,
        updatedAt: new Date()
      },
      select: {
        id: true,
        name: true,
        email: true,
        telefone: true,
        role: true,
        active: true,
        area: true,
        Empresas: {
          select: {
            id: true,
            razaoSocial: true
          }
        },
        diretorias: {
          select: {
            id: true,
            nome: true
          }
        },
        regionais: {
          select: {
            id: true,
            nome: true
          }
        },
        Filiais: {
          select: {
            id: true,
            nome: true
          }
        },
        createdAt: true,
        updatedAt: true
      }
    });

    return NextResponse.json(user, { status: 201 });
  } catch (error) {
    console.error('Erro ao criar usu√°rio:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
